<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.okdeer.mall.activity.serviceGoodsRecommend.mapper.ActivityServiceGoodsRecommendMapper">

	<resultMap type="com.okdeer.mall.activity.serviceGoodsRecommend.entity.ActivityServiceGoodsRecommend" id="ActivityServiceGoodsRecommend" >
		<result property="id" column="id" />
		<result property="name" column="name" />
		<result property="areaType" column="area_type" />
		<result property="status" column="status" />
		<result property="startTime" column="start_time" />
		<result property="endTime" column="end_time" />
		<result property="createTime" column="create_time" />
		<result property="createUserId" column="create_user_id" />
		<result property="updateTime" column="update_time" />
		<result property="updateUserId" column="update_user_id" />
		
		<!-- 上面是数据库属性,下面是自己扩展的属性 -->
<!-- 		<result property="good" column="update_user_id" /> -->
	</resultMap>
	
	<sql id="columns">
		id,name,status,start_time,end_time,area_type,create_time,create_user_id,update_time,update_user_id
	</sql>

    <select id="list" parameterType="java.util.Map" resultMap="ActivityServiceGoodsRecommend">
		select 
			s.id,
			s.name,
			s.status,
			s.start_time,
			s.end_time,
			s.area_type,
			s.create_time,
			s.create_user_id,
			s.update_time,
			s.update_user_id,
			(select count(*) from activity_service_goods_recommend_goods where activity_id = s.id) as goodsCount
			from activity_service_goods_recommend s where 1 = 1 
		<if test="name != null and name != ''">
			and s.name like concat('%',#{name},'%' )
		</if>
		<if test="status != null and status != ''">
			and s.status = #{status}
		</if>
		order by s.create_time desc
	</select>
	
    <insert id="add" parameterType="com.okdeer.mall.activity.serviceGoodsRecommend.entity.ActivityServiceGoodsRecommend">
        INSERT INTO activity_service_goods_recommend
	    <trim prefix="(" suffix=")" suffixOverrides="," >
	      <if test="id != null and id != ''" >id,</if>
	      <if test="name != null and name != ''" >name,</if>
	      <if test="status != null" >status,</if>
	      <if test="startTime != null" >start_time,</if>
	      <if test="endTime != null" >end_time,</if>
	      <if test="areaType != null" >area_type,</if>
	      <if test="createTime != null" >create_time,</if>
	      <if test="createUserId != null and createUserId != ''" >create_user_id,</if>
	      <if test="updateTime != null" >update_Time,</if>
	      <if test="updateUserId != null and updateUserId != ''" >update_user_id,</if>
	    </trim>
	    <trim prefix="values (" suffix=")" suffixOverrides="," >
	      <if test="id != null and id != ''" >#{id},</if>
	      <if test="name != null and name != ''" >#{name},</if>
	      <if test="status != null" >#{status},</if>
	      <if test="startTime != null" > #{startTime},</if>
	      <if test="endTime != null" > #{endTime},</if>
	      <if test="areaType != null" >#{areaType},</if>
	      <if test="createTime != null" >#{createTime},</if>
	      <if test="createUserId != null and createUserId != ''" >#{createUserId},</if>
	      <if test="updateTime != null" >#{updateTime},</if>
	      <if test="updateUserId != null and updateUserId != ''" >#{updateUserId},</if>
	    </trim>
	</insert>

    <update id="update" parameterType="com.okdeer.mall.activity.serviceGoodsRecommend.entity.ActivityServiceGoodsRecommend">
        update activity_service_goods_recommend set
			<if test="name != null">
				name = #{name},
			</if>
			<if test="status != null">
				status = #{status},
			</if>
			<if test="startTime != null">
				start_time = #{startTime},
			</if>
			<if test="endTime != null">
				end_time = #{endTime},
			</if>
			<if test="areaType != null">
				area_type = #{areaType},
			</if>
			<if test="createTime != null">
				create_time = #{createTime},
			</if>
			<if test="createUserId != null">
				create_user_id = #{createUserId},
			</if>
			<if test="updateTime != null">
				update_time = #{updateTime},
			</if>
			<if test="updateUserId != null">
				update_user_id = #{updateUserId},
			</if>
        id = #{id}
        where id = #{id}
    </update>

    <select id="findById" resultMap="ActivityServiceGoodsRecommend" parameterType="string">
        select <include refid="columns"/> from activity_service_goods_recommend where id = #{value} 
    </select>
    
    <select id="delete" parameterType="string">
        delete from activity_service_goods_recommend where id = #{value} 
    </select>
    
    <!-- 上面是标准的crud -->
    
    <select id="listGoods" parameterType="map" resultType="map">
		select 
			s.id,
			s.name,
			si.store_name as storeName,
			s.online_price as onlinePrice,
			pic.url as url,
			cate.`name` as categoryName,
			service.product_no as productNo,
			stock.sellable
			from goods_store_sku s 
			left join store_info si on (s.store_id = si.id) 
			left join goods_store_sku_picture pic on (pic.store_sku_id = s.id and pic.type = 1)
			left join goods_store_spu spu on (s.store_spu_id = spu.id)
			left join goods_spu_category cate on (spu.spu_category_id = cate.id)
			left join goods_store_sku_service service on (s.id = service.store_sku_id) 
			left join goods_store_sku_stock stock on (stock.store_sku_id = s.id)
			where s.disabled = 0 
			and s.type in (3,4) 
			<if test="goodsName != null and goodsName != ''">
				and s.name like concat('%',#{goodsName},'%' )
			</if>
			<if test="storeName != null and storeName != ''">
				and si.store_name like concat('%',#{storeName},'%' )
			</if>
			<if test="productNo != null and productNo != ''">
				and service.product_no like concat('%',#{productNo},'%' )
			</if>
			<if test="goodsIdList != null">
				and s.id in
				<foreach item="item" index="index" collection="goodsIdList" open="(" separator="," close=")">  
	  				#{item}  
	 			</foreach>  
 			</if>
		order by s.update_time desc 
	</select>

    <update id="updateBatchStatus" parameterType="map">
    	update activity_service_goods_recommend set status = #{status} where id in 
		<foreach item="item" index="index" collection="ids" open="(" separator="," close=")">  
  			#{item}  
 		</foreach>  
<!--  		未开始或者进行中的才关闭,其他状态的不管 -->
 		and (status = 0 or status = 1)
    </update>
	<!-- 1、查询活动未开始，开始时间小于当前的数据 即为要设置开始，2、活动开始、结束时间小于当前的数据 即为要设置结束 tuzhiding-->
	<select id="listByJob" parameterType="map" resultMap="ActivityServiceGoodsRecommend">
		select s.* from activity_service_goods_recommend s where 
		(s.`status` = 0 and  s.start_time &lt;= #{nowTime})
		OR
		(s.`status` = 1 and  s.end_time &lt;= #{nowTime})
	</select>   
	
<!-- 	用于判断某个时间段内活动是否冲突 -->
	<select id="countTimeQuantum"  parameterType="map" resultType="int">
		select count(*) from activity_service_goods_recommend c
	    where 1 = 1 
<!-- 	    未开始或者进行中 -->
	    and (c.status = 1 or c.status = 0)
		AND 
		(
			#{startTime} BETWEEN c.start_time and c.end_time 
      		OR 
      		#{endTime} BETWEEN c.start_time and c.end_time 
      		OR 
     		(c.start_time &gt;= #{startTime} and c.end_time &lt;= #{endTime})
    	)
<!-- 	    如果是修改,就忽略自己本身这条记录 -->
	    <if test="id != null and id != ''">
	    	and c.id != #{id}
	    </if>
	    <if test="associateIdList != null and associateIdList.size > 0">
	    	and 
	    	(
		    	c.area_type = 0 
				OR
				c.id in (
					select a.activity_id from activity_service_goods_recommend_area a where a.activity_id = c.id
					AND a.area_id in  
					<foreach collection="associateIdList" open="(" close=")" index="index" item="item"  separator=",">
						#{item}
					</foreach>
				)
			)
		</if>
    </select>
    
    <!-- 微信推荐商品列表 -->
    <select id="listRecommendGoodsFowWx" parameterType="map" resultType="map">
    	select 
		pic.url,
		sku.id as goodsStoreSkuId,
		sku.store_id as storeId,
		sku.name as goodsName,
		sku.alias AS alias,
		stock.sellable,
		stock.locked,
		sku.market_price as marketPrice,
		sku.online_price as onlinePrice,
		CAST(service.is_shop_num AS SIGNED) as isShopNum,
		IFNULL(store.logo_url,'') AS logoUrl,
		IFNULL(store.store_name,'') as storeName,
		service.shop_num as shopNum		
		from 
		activity_service_goods_recommend_goods rg 
		left join activity_service_goods_recommend r on (r.id = rg.activity_id and r.status = 1)
		left join goods_store_sku sku on (rg.goods_id = sku.id)
		left join store_info store ON sku.store_id = store.id
		left join store_info_ext ext ON sku.store_id = ext.store_id
		left join goods_store_sku_picture pic on (sku.id = pic.store_sku_id and pic.type = 1)
		left join goods_store_sku_stock stock on (sku.id = stock.store_sku_id) 
		left join goods_store_sku_service service on (service.store_sku_id = sku.id)
		
		where 
		sku.disabled = 0
		and sku.`status` = 1
		and sku.`online` = 1
		and sku.`type` in (3,4)
		and service.audit_status = 1
		and ext.is_closed = 1
		and 
		(
			<!-- 3：上门服务店服务商品 没有服务时间、4：到店消费服务商品 有服务时间', -->
			(
				sku.type = 4 and 
				#{nowTime} &gt;= service.start_time and
				#{nowTime} &lt;= service.end_time
			)
			or
			sku.type = 3
		)
		and 
		(
			r.area_type = 0
			or
			(
				r.area_type = 1 and (
						r.id in( 
							select activity_id from activity_service_goods_recommend_area area 
							where area.activity_id = r.id
							and 
							(
								(area.area_id = #{cityId} and area.type = 0) 
									OR
								(area.area_id = #{provinceId} and area.type = 1) 
							)
						)
				)
			)
		)
		order by rg.sort desc, sku.create_time desc
		limit #{length} 
    </select>
</mapper>